{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.6.5"
    },
    "colab": {
      "name": "Keras in Tensorflow.ipynb",
      "provenance": [],
      "include_colab_link": true
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/dlsun/Data402-F21/blob/main/Tensorflow%20and%20Keras\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "JY6CVsrNGgoR"
      },
      "source": [
        "# Tensorflow in Keras\n",
        "\n",
        "The [documentation for Tensorflow's implementation](https://www.tensorflow.org/guide/keras) of the Keras API is quite good and worth reading from beginning to end."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "lFTRySK_GgoT"
      },
      "source": [
        "import tensorflow as tf\n",
        "from tensorflow.keras import layers"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "y4XzMsM3GgoU"
      },
      "source": [
        "Let's read in some data that we can use for training."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "P5ojWYLwGgoU"
      },
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "\n",
        "data = pd.read_csv(\"https://github.com/dlsun/Data402-F21/blob/main/data/2016-presidential-election.csv?raw=true\",\n",
        "                   sep=\";\")\n",
        "data = data[[\"At Least Bachelors's Degree\", \"Black\",\n",
        "             \"Republicans 2016\"]].dropna()\n",
        "\n",
        "x_train = data[[\"At Least Bachelors's Degree\", \"Black\"]].values\n",
        "y_train = data[\"Republicans 2016\"].values\n",
        "\n",
        "x_train, y_train"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "73e39cqBGgoV"
      },
      "source": [
        "# Specifying and Training a Model\n",
        "\n",
        "Let's train the following neural network.\n",
        "\n",
        "![](https://github.com/dlsun/Data401Fall2018/blob/master/neural_network.png?raw=1)"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "gYlodSdcGgoV"
      },
      "source": [
        "# specify the model architecture\n",
        "model = tf.keras.Sequential([\n",
        "    layers.Dense(2, activation=\"relu\"),\n",
        "    layers.Dense(1)\n",
        "])\n",
        "\n",
        "# specify the loss function and optimization function\n",
        "model.compile(optimizer=\"adam\",\n",
        "              loss=tf.keras.losses.MeanSquaredError())\n",
        "\n",
        "# fit the model to data\n",
        "model.fit(x_train, y_train, epochs=50, batch_size=10)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "j4UxtSCgKOn7"
      },
      "source": [
        "model.predict([[25., 2.]])"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "oAHLYT0vMepB"
      },
      "source": [
        "model.predict([[60, 30.]])"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "2aHsvQ7BGgoV"
      },
      "source": [
        "The `tf.keras.Sequential` assumes that the model is just a sequence of layers, one after the other. Sometimes, you will want different architectures where, for example, different parts of the model might share a layer. You can still do this in Keras by using the [functional API](https://www.tensorflow.org/guide/keras#build_advanced_models). Each `Layer` object can also be called as a function."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "iIJvtKcDGgoW"
      },
      "source": [
        "# specify the model architecture\n",
        "x = layers.Input(shape=(2, ))\n",
        "h1 = layers.Dense(2, activation=\"relu\")(x)\n",
        "y_pred = layers.Dense(1)(h1)\n",
        "\n",
        "model = tf.keras.Model(inputs=x, outputs=y_pred)\n",
        "\n",
        "# specify the loss function and optimization function\n",
        "model.compile(optimizer=\"adam\",\n",
        "              loss=tf.keras.losses.MeanSquaredError())\n",
        "\n",
        "# fit the model to data\n",
        "model.fit(x_train, y_train, epochs=50, batch_size=10)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "0Ix9qGNrKL4f"
      },
      "source": [
        "model.predict([[25., 2.]])"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "8Sd4WYZNNEEp"
      },
      "source": [
        "model.predict([[60, 30.]])"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "xN0U5-lnN0zU"
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    }
  ]
}